[{"id":0,"href":"/docs/example/","title":"Passo 1: Sito Internet","section":"Docs","content":"\rSito Internet\r#\rIntroduzione\r#\rDopo un\u0026rsquo;attenta analisi sono arrivato alla conclusione di sviluppare un sito web che mi consente di raggruppare tutte le mie conoscenze.\nDi seguito spiegherò passo passo come ho sviluppato questo sito, i passaggi e le alternative.\nAnalisi\r#\rL\u0026rsquo;analisi effettuata per scegliere come effettuare il sito è ricaduta su due alternative: WordPress e Hugo, due popolari piattaforme di gestione e generazione di siti web.\nTipo di piattaforma: WordPress è un CMS (Content Management System, ossia sistema di gestione dei contenuti) che permette una gestione dei contenuti dinamica e interattiva, mentre Hugo è un generatore di siti statici che produce pagine statiche pre-renderizzate.\nLinguaggio di programmazione: WordPress è sviluppato in PHP e richiede un ambiente server per funzionare. Hugo è scritto in Go e genera siti che consistono esclusivamente in file statici.\nInstallazione: WordPress necessita di un server web, PHP e un database MySQL per funzionare. Hugo, al contrario, non richiede un database, rendendo l\u0026rsquo;installazione e la configurazione più semplici e veloci.\nGestione dei contenuti: WordPress permette una gestione dei contenuti dinamica tramite una interfaccia web user-friendly. Hugo utilizza file Markdown per i contenuti, che vengono trasformati in pagine statiche.\nPerformance: Hugo offre performance superiori grazie alla generazione di file statici, che possono essere serviti molto rapidamente rispetto ai contenuti dinamici di WordPress, che dipendono dalle query al database.\nSicurezza: I siti generati con Hugo sono intrinsecamente più sicuri poiché non ci sono esecuzioni lato server o database. WordPress, essendo dinamico, è più vulnerabile agli attacchi e richiede aggiornamenti regolari per mantenere la sicurezza.\nScalabilità: I siti statici generati da Hugo sono altamente scalabili e possono essere facilmente distribuiti su CDN (Content Distribution Network ossia delle reti di distribuzione dei contenuti). WordPress può diventare lento e problematico quando il traffico e il numero di contenuti crescono significativamente.\nTemi e plugin: WordPress ha un vasto ecosistema di temi e plugin che permettono di estendere le funzionalità del sito. Hugo offre temi e una certa quantità di plugin, ma la personalizzazione può richiedere più interventi manuali.\nSEO (Search Engine Optimization ossia “ottimizzazione per i motori di ricerca”): WordPress può essere ottimizzato per SEO tramite vari plugin. Hugo offre buone capacità SEO nativamente, e ulteriori ottimizzazioni possono essere configurate facilmente.\nAggiornamenti: WordPress richiede aggiornamenti frequenti per il core, i temi e i plugin. Hugo, essendo statico, richiede meno manutenzione; basta rigenerare il sito quando ci sono aggiornamenti.\nCurva di apprendimento: WordPress è più facile da usare per i principianti grazie alla sua interfaccia grafica. Hugo, pur essendo potente, richiede un po\u0026rsquo; di conoscenza di programmazione e uso del terminale.\nCommunity e supporto: WordPress ha una delle più grandi comunità open source con abbondante documentazione e supporto. Hugo ha una community in crescita e un buon supporto, soprattutto su GitHub.\nEsempi di utilizzo: WordPress è ideale per blog, siti aziendali, e-commerce e qualsiasi sito che necessiti di interattività dinamica. Hugo è perfetto per blog, documentazioni, portfoli e qualsiasi sito che beneficia di contenuti statici.\nCosto: Entrambe le piattaforme sono gratuite, ma i costi di hosting e plugin possono variare. WordPress può richiedere hosting più potente e plugin a pagamento, mentre Hugo può essere ospitato a basso costo su servizi di hosting statici.\nTabella Riassuntiva\r#\rCaratteristica WordPress Hugo Tipo di piattaforma CMS (Content Management System) Generatore di siti statici Linguaggio di programmazione PHP Go Installazione Richiede server web, PHP e database No database, solo file statici Gestione dei contenuti Dinamica, tramite interfaccia web Statico, tramite file Markdown Performance Dipende dal server e dal database Altissima, generazione di file statici Sicurezza Vulnerabile a attacchi (richiede aggiornamenti frequenti) Molto sicuro (nessuna esecuzione lato server) Scalabilità Scalabilità limitata da server e database Altamente scalabile Temi e plugin Migliaia di temi e plugin disponibili Temi disponibili, meno plugin (più customizzazioni manuali) SEO Ottimizzato tramite plugin Ottimizzato nativamente e tramite configurazioni Aggiornamenti Richiede aggiornamenti regolari Meno frequenti, basta rigenerare il sito Curva di apprendimento Facile per principianti Più ripida, richiede conoscenze di base di programmazione e terminale Community e supporto Ampia community e supporto esteso Comunità in crescita, supporto disponibile su forum e GitHub Esempi di utilizzo Blog, siti aziendali, e-commerce Blog, documentazione, portfolio, siti statici Costo Gratuito (con hosting e plugin a pagamento) Gratuito (con hosting statico a pagamento) Scelta\r#\rLa scelta tra WordPress e Hugo, dipende dalle esigenze specifiche del progetto.\nNel mio caso, ho preferito Hugo per diverse ragioni:\nSicurezza\r#\rHugo offre un livello di sicurezza superiore rispetto a WordPress.\nEssendo un generatore di siti statici, Hugo non richiede un database né l\u0026rsquo;esecuzione di script lato server, riducendo così i potenziali punti di attacco.\nQuesto è particolarmente importante per chi, come me, vuole evitare problemi di sicurezza e manutenzione costante.\nLinguaggio di programmazione\r#\rUno dei motivi principali per cui ho scelto Hugo è il linguaggio di programmazione.\nHugo è scritto in Go (Golang), un linguaggio che apprezzo molto per la sua efficienza e le sue performance.\nGo è utilizzato in progetti importanti come Docker e Kubernetes, il che dimostra la sua potenza e affidabilità.\nAl contrario, WordPress è basato su PHP, un linguaggio che considero obsoleto e che non mi piace utilizzare nonostante sia uno dei linguaggi più utilizzati sul web.\nTipo di sito\r#\rIl sito che volevo sviluppare è principalmente un gruppo di tutorial o un blog di documentazione.\nHugo è perfetto per questo scopo perché consente di scrivere i contenuti in Markdown, un formato semplice e intuitivo che adoro.\nQuesta scelta mi permette di mantenere il sito minimalista e facile da gestire.\nTemi minimalisti\r#\rI temi disponibili per Hugo sono generalmente minimalisti, che è esattamente quello che cercavo.\nNon ho bisogno di interfacce complesse o di numerose funzionalità avanzate; voglio un sito pulito e funzionale, che Hugo è in grado di offrire perfettamente.\nCosto\r#\rUtilizzando Hugo e GitHub Pages, i costi di hosting del mio sito sono pari a zero.\nQuesta è una grande vantaggio rispetto a WordPress, che può richiedere spese aggiuntive per hosting e plugin.\nE visto che voglio investire solo i soldi guadagnati seguendo questo progetto, vuol dire che è ottimo per avere un sito web di partenza.\nScalabilità\r#\rAnche se il mio sito è attualmente un semplice blog di documentazione, c\u0026rsquo;è sempre la possibilità che cresca in futuro.\nIn tal caso, posso sempre considerare di passare a WordPress se dovessi avere bisogno di funzionalità più avanzate.\nTuttavia, per ora, Hugo soddisfa pienamente le mie esigenze.\nPrimi Passi\r#\rPasso 1: Installare Hugo\r#\rPer l\u0026rsquo;installazione potete seguire le indicazioni dettagliate sulla pagina ufficiale di Hugo.\nGli strumenti utilizzati sono:\nTerminale o Powershell Editor di testo, nel mio caso Visual Studio Code Git ed Github per tenere traccia del sito e poterlo pubblicare Verifichiamo che Hugo sia stato installato con successo, aprendo il Terminale su Linux o Mac, oppure aprendo la Powershell su Windows e scriviamo il comando:\nhugo version Premiamo invio, e se ci ritorna la versione il tutto è stato installato correttamente.\nPasso 2: Creare un nuovo sito Hugo\r#\rCreiamo una nuova cartella dove lo desideriamo per esempio sul Desktop e ci spostiamo al suo interno tramite i comandi:\nhugo new site nome-sito cd nome-sito Passo 3: Inizializzare un repository Git\r#\rInizializza un repository Git nella cartella del progetto:\ngit init Questo ci servirà per pubblicare su GitHub il nostro sito e avere uno storico delle versioni del sito.\nPasso 4: Aggiungere il tema\r#\rSono andato sulla pagina ufficiale Hugo Themes per scegliere il tema giusto per me. Nel mio caso ho scelto Hugo Book Theme, e l\u0026rsquo;ho installato tramite il comando:\ngit submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book Passo 5: Configurare il tema nel file di configurazione\r#\rArrivati a questo punto bisogna configurare il tema, e per farlo basta aprire il file di configurazione hugo.toml e aggiungere o sostituire il seguente rigo:\ntheme = \u0026#34;hugo-book\u0026#34; Passo 6: Creare il primo contenuto\r#\rCrea una nuova pagina di esempio scrivendo sul Terminale o sulla Powershell:\nhugo new docs/prima-pagina.md Tutte le pagine verranno inserite all\u0026rsquo;interno della cartella: content/docs.\nLe pagine devono essere scritte in Markdown.\nPasso 7: Eseguire il server di sviluppo\r#\rAvvia il server di sviluppo per vedere il sito in azione:\nhugo server -D Il sito sarà disponibile sull\u0026rsquo;URL http://localhost:1313/\n"},{"id":1,"href":"/docs/tutorial/","title":"Passo 2: Tutorial Vari","section":"Docs","content":"\rTutorial Vari\r#\rIntroduzione\r#\ra\n"},{"id":2,"href":"/posts/my-first-post/","title":"My First Post","section":"Posts","content":"\rIntroduzione\r#\rQuesto è del testo in grassetto, e questo è del testo in corsivo.\nVisita il sito web Hugo !!!\n"},{"id":3,"href":"/docs/tutorial/markdown/","title":"Markdown","section":"Passo 2: Tutorial Vari","content":"ciao mondo\n"}]