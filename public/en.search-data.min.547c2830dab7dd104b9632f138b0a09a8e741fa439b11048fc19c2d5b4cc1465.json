[{"id":0,"href":"/docs/sito/","title":"Passo 1: Sito Internet","section":"Docs","content":"\rSito Internet\r#\rIntroduzione\r#\rDopo un\u0026rsquo;attenta analisi sono arrivato alla conclusione di sviluppare un sito web che mi consente di raggruppare tutte le mie conoscenze.\nDi seguito spiegherò passo passo come ho sviluppato questo sito, i passaggi e le alternative.\nAnalisi\r#\rL\u0026rsquo;analisi effettuata per scegliere come effettuare il sito è ricaduta su due alternative: WordPress e Hugo, due popolari piattaforme di gestione e generazione di siti web.\nTipo di piattaforma: WordPress è un CMS (Content Management System, ossia sistema di gestione dei contenuti) che permette una gestione dei contenuti dinamica e interattiva, mentre Hugo è un generatore di siti statici che produce pagine statiche pre-renderizzate.\nLinguaggio di programmazione: WordPress è sviluppato in PHP e richiede un ambiente server per funzionare. Hugo è scritto in Go e genera siti che consistono esclusivamente in file statici.\nInstallazione: WordPress necessita di un server web, PHP e un database MySQL per funzionare. Hugo, al contrario, non richiede un database, rendendo l\u0026rsquo;installazione e la configurazione più semplici e veloci.\nGestione dei contenuti: WordPress permette una gestione dei contenuti dinamica tramite una interfaccia web user-friendly. Hugo utilizza file Markdown per i contenuti, che vengono trasformati in pagine statiche.\nPerformance: Hugo offre performance superiori grazie alla generazione di file statici, che possono essere serviti molto rapidamente rispetto ai contenuti dinamici di WordPress, che dipendono dalle query al database.\nSicurezza: I siti generati con Hugo sono intrinsecamente più sicuri poiché non ci sono esecuzioni lato server o database. WordPress, essendo dinamico, è più vulnerabile agli attacchi e richiede aggiornamenti regolari per mantenere la sicurezza.\nScalabilità: I siti statici generati da Hugo sono altamente scalabili e possono essere facilmente distribuiti su CDN (Content Distribution Network ossia delle reti di distribuzione dei contenuti). WordPress può diventare lento e problematico quando il traffico e il numero di contenuti crescono significativamente.\nTemi e plugin: WordPress ha un vasto ecosistema di temi e plugin che permettono di estendere le funzionalità del sito. Hugo offre temi e una certa quantità di plugin, ma la personalizzazione può richiedere più interventi manuali.\nSEO (Search Engine Optimization ossia “ottimizzazione per i motori di ricerca”): WordPress può essere ottimizzato per SEO tramite vari plugin. Hugo offre buone capacità SEO nativamente, e ulteriori ottimizzazioni possono essere configurate facilmente.\nAggiornamenti: WordPress richiede aggiornamenti frequenti per il core, i temi e i plugin. Hugo, essendo statico, richiede meno manutenzione; basta rigenerare il sito quando ci sono aggiornamenti.\nCurva di apprendimento: WordPress è più facile da usare per i principianti grazie alla sua interfaccia grafica. Hugo, pur essendo potente, richiede un po\u0026rsquo; di conoscenza di programmazione e uso del terminale.\nCommunity e supporto: WordPress ha una delle più grandi comunità open source con abbondante documentazione e supporto. Hugo ha una community in crescita e un buon supporto, soprattutto su GitHub.\nEsempi di utilizzo: WordPress è ideale per blog, siti aziendali, e-commerce e qualsiasi sito che necessiti di interattività dinamica. Hugo è perfetto per blog, documentazioni, portfoli e qualsiasi sito che beneficia di contenuti statici.\nCosto: Entrambe le piattaforme sono gratuite, ma i costi di hosting e plugin possono variare. WordPress può richiedere hosting più potente e plugin a pagamento, mentre Hugo può essere ospitato a basso costo su servizi di hosting statici.\nTabella Riassuntiva\r#\rCaratteristica WordPress Hugo Tipo di piattaforma CMS (Content Management System) Generatore di siti statici Linguaggio di programmazione PHP Go Installazione Richiede server web, PHP e database No database, solo file statici Gestione dei contenuti Dinamica, tramite interfaccia web Statico, tramite file Markdown Performance Dipende dal server e dal database Altissima, generazione di file statici Sicurezza Vulnerabile a attacchi (richiede aggiornamenti frequenti) Molto sicuro (nessuna esecuzione lato server) Scalabilità Scalabilità limitata da server e database Altamente scalabile Temi e plugin Migliaia di temi e plugin disponibili Temi disponibili, meno plugin (più customizzazioni manuali) SEO Ottimizzato tramite plugin Ottimizzato nativamente e tramite configurazioni Aggiornamenti Richiede aggiornamenti regolari Meno frequenti, basta rigenerare il sito Curva di apprendimento Facile per principianti Più ripida, richiede conoscenze di base di programmazione e terminale Community e supporto Ampia community e supporto esteso Comunità in crescita, supporto disponibile su forum e GitHub Esempi di utilizzo Blog, siti aziendali, e-commerce Blog, documentazione, portfolio, siti statici Costo Gratuito (con hosting e plugin a pagamento) Gratuito (con hosting statico a pagamento) Scelta\r#\rLa scelta tra WordPress e Hugo, dipende dalle esigenze specifiche del progetto.\nNel mio caso, ho preferito Hugo per diverse ragioni:\nSicurezza\r#\rHugo offre un livello di sicurezza superiore rispetto a WordPress.\nEssendo un generatore di siti statici, Hugo non richiede un database né l\u0026rsquo;esecuzione di script lato server, riducendo così i potenziali punti di attacco.\nQuesto è particolarmente importante per chi, come me, vuole evitare problemi di sicurezza e manutenzione costante.\nLinguaggio di programmazione\r#\rUno dei motivi principali per cui ho scelto Hugo è il linguaggio di programmazione.\nHugo è scritto in Go (Golang), un linguaggio che apprezzo molto per la sua efficienza e le sue performance.\nGo è utilizzato in progetti importanti come Docker e Kubernetes, il che dimostra la sua potenza e affidabilità.\nAl contrario, WordPress è basato su PHP, un linguaggio che considero obsoleto e che non mi piace utilizzare nonostante sia uno dei linguaggi più utilizzati sul web.\nTipo di sito\r#\rIl sito che volevo sviluppare è principalmente un gruppo di tutorial o un blog di documentazione.\nHugo è perfetto per questo scopo perché consente di scrivere i contenuti in Markdown, un formato semplice e intuitivo che adoro.\nQuesta scelta mi permette di mantenere il sito minimalista e facile da gestire.\nTemi minimalisti\r#\rI temi disponibili per Hugo sono generalmente minimalisti, che è esattamente quello che cercavo.\nNon ho bisogno di interfacce complesse o di numerose funzionalità avanzate; voglio un sito pulito e funzionale, che Hugo è in grado di offrire perfettamente.\nCosto\r#\rUtilizzando Hugo e GitHub Pages, i costi di hosting del mio sito sono pari a zero.\nQuesta è una grande vantaggio rispetto a WordPress, che può richiedere spese aggiuntive per hosting e plugin.\nE visto che voglio investire solo i soldi guadagnati seguendo questo progetto, vuol dire che è ottimo per avere un sito web di partenza.\nScalabilità\r#\rAnche se il mio sito è attualmente un semplice blog di documentazione, c\u0026rsquo;è sempre la possibilità che cresca in futuro.\nIn tal caso, posso sempre considerare di passare a WordPress se dovessi avere bisogno di funzionalità più avanzate.\nTuttavia, per ora, Hugo soddisfa pienamente le mie esigenze.\nPrimi Passi\r#\rPasso 1: Installare Hugo\r#\rPer l\u0026rsquo;installazione potete seguire le indicazioni dettagliate sulla pagina ufficiale di Hugo.\nGli strumenti utilizzati sono:\nTerminale o Powershell Editor di testo, nel mio caso Visual Studio Code Git ed Github per tenere traccia del sito e poterlo pubblicare Verifichiamo che Hugo sia stato installato con successo, aprendo il Terminale su Linux o Mac, oppure aprendo la Powershell su Windows e scriviamo il comando:\nhugo version Premiamo invio, e se ci ritorna la versione il tutto è stato installato correttamente.\nPasso 2: Creare un nuovo sito Hugo\r#\rCreiamo una nuova cartella dove lo desideriamo per esempio sul Desktop e ci spostiamo al suo interno tramite i comandi:\nhugo new site nome-sito cd nome-sito Passo 3: Inizializzare un repository Git\r#\rInizializza un repository Git nella cartella del progetto:\ngit init Questo ci servirà per pubblicare su GitHub il nostro sito e avere uno storico delle versioni del sito.\nPasso 4: Aggiungere il tema\r#\rSono andato sulla pagina ufficiale Hugo Themes per scegliere il tema giusto per me. Nel mio caso ho scelto Hugo Book Theme, e l\u0026rsquo;ho installato tramite il comando:\ngit submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book Passo 5: Configurare il tema nel file di configurazione\r#\rArrivati a questo punto bisogna configurare il tema, e per farlo basta aprire il file di configurazione hugo.toml e aggiungere o sostituire il seguente rigo:\ntheme = \u0026#34;hugo-book\u0026#34; Passo 6: Creare il primo contenuto\r#\rCrea una nuova pagina di esempio scrivendo sul Terminale o sulla Powershell:\nhugo new docs/prima-pagina.md Tutte le pagine verranno inserite all\u0026rsquo;interno della cartella: content/docs.\nLe pagine devono essere scritte in Markdown.\nPasso 7: Eseguire il server di sviluppo\r#\rAvvia il server di sviluppo per vedere il sito in azione:\nhugo server -D Il sito sarà disponibile sull\u0026rsquo;URL http://localhost:1313/\n"},{"id":1,"href":"/docs/tutorial/","title":"Passo 2: Tutorial Vari","section":"Docs","content":"\rTutorial Vari\r#\rIntroduzione\r#\r"},{"id":2,"href":"/docs/tutorial/git/","title":"Git","section":"Passo 2: Tutorial Vari","content":"\rGuida Completa a Git\r#\rIntroduzione\r#\rIn questa guida, esploreremo un caso reale semplificato per analizzare ogni comando di Git e GitLab. Gli strumenti principali utilizzati saranno Git e GitLab.\nCreare un Nuovo Progetto su GitLab\r#\rAccedi a GitLab. Crea un nuovo progetto chiamato EsempioGit con visibilità public. Clonare il Progetto su un Computer Locale\r#\rDopo aver creato il progetto, scaricalo in locale posizionandoti nella cartella di riferimento ed eseguendo il comando:\ngit clone \u0026lt;url-del-progetto\u0026gt; git clone \u0026lt;url-del-progetto\u0026gt;: Questo comando crea una copia locale del repository remoto specificato dall\u0026rsquo;URL. Creare un File Vuoto\r#\rUna volta clonato il progetto, noterai che si è creata una cartella con lo stesso nome del progetto remoto. Spostati all\u0026rsquo;interno della cartella e noterai che il terminale visualizza (master) accanto al prompt. Per creare un file vuoto:\ntouch ReadMe.md ls touch ReadMe.md: Questo comando crea un file vuoto chiamato ReadMe.md. ls: Questo comando elenca i file presenti nella directory corrente. Dovresti vedere il file ReadMe.md appena creato. Il file ReadMe.md conterrà le istruzioni del progetto.\nAggiungere il File al Progetto\r#\rPrepara le modifiche della cartella corrente:\ngit status git status: Questo comando mostra lo stato dei file nel repository. Indica quali file sono stati modificati, aggiunti o eliminati. git add . git add .: Questo comando aggiunge tutte le modifiche (nuovi file, modifiche ai file esistenti e eliminazioni) all\u0026rsquo;area di staging, preparandole per il commit. git status Verifica lo stato dei file per confermare che sono pronti per il commit. I file pronti saranno mostrati in verde. git reset . git reset .: Questo comando rimuove tutte le modifiche dall\u0026rsquo;area di staging, permettendoti di apportare ulteriori modifiche prima di riprepararle. git status Verifica lo stato dei file. Ora i file non saranno più nell\u0026rsquo;area di staging e verranno mostrati in rosso. git add . Riprepara tutte le modifiche per il commit. git status Verifica nuovamente lo stato dei file. I file pronti saranno mostrati in verde. Crea una commit con una descrizione:\ngit commit -m \u0026#34;Primo Commit\u0026#34; git commit -m \u0026quot;Primo Commit\u0026quot;: Questo comando crea una snapshot delle modifiche preparate e le salva nel repository locale con il messaggio di commit \u0026ldquo;Primo Commit\u0026rdquo;. Invia tutto sul repository remoto:\ngit push origin master git push origin master: Questo comando invia le commit dal repository locale al repository remoto, aggiornando il branch master. Creare e Gestire Branch\r#\rCrea un nuovo branch per lavorare in autonomia:\ngit branch git branch: Questo comando elenca tutti i branch esistenti nel repository locale e indica il branch attualmente attivo. git branch -a git branch -a: Questo comando elenca tutti i branch esistenti sia nel repository locale che remoto. git branch dev git branch dev: Questo comando crea un nuovo branch chiamato dev. git branch -a Verifica nuovamente tutti i branch per confermare la creazione del nuovo branch dev. Spostati sul branch di riferimento:\ngit checkout dev git checkout dev: Questo comando cambia il branch attivo a dev. git checkout -b my_branch git checkout -b my_branch: Questo comando crea e cambia il branch attivo a my_branch. git branch -d dev git branch -d dev: Questo comando elimina il branch dev. Nota: non puoi eliminare il branch attualmente attivo. Ora sei connesso al branch (my_branch). Effettua delle modifiche al file:\nnano ReadMe.md nano ReadMe.md: Questo comando apre il file ReadMe.md con l\u0026rsquo;editor di testo nano. Scrivi:\n# ReadMe In questo file si scrive qualcosa dal my_branch Salva con CTRL + O e esci con CTRL + X.\nVisualizza il contenuto del file:\ncat ReadMe.md cat ReadMe.md: Questo comando visualizza il contenuto del file ReadMe.md. Prepara il file, effettua la commit e invia le modifiche:\ngit add . Aggiungi tutte le modifiche all\u0026rsquo;area di staging. git commit -m \u0026#34;Cambiato il contenuto del file dal my_branch\u0026#34; Crea una commit con il messaggio \u0026ldquo;Cambiato il contenuto del file dal my_branch\u0026rdquo;. git push origin my_branch Invia le modifiche al repository remoto nel branch my_branch. Ricarica la pagina di GitLab per vedere i branch e le modifiche.\nUnire Branch\r#\rUnisci my_branch con master:\ngit checkout master Cambia il branch attivo a master. git pull origin master git pull origin master: Questo comando aggiorna il branch locale master con le modifiche dal repository remoto. git merge my_branch git merge my_branch: Questo comando unisce le modifiche del branch my_branch nel branch master. git push origin master Invia le modifiche unite al repository remoto. git branch -d my_branch Elimina il branch my_branch. Ora il branch master include tutte le modifiche.\nGestione dei Conflitti\r#\rCrea due branch distinti:\ngit branch dev Crea un branch chiamato dev. git branch my_branch Crea un branch chiamato my_branch. Modifica la stessa riga in entrambi i branch:\ngit checkout dev Cambia il branch attivo a dev. nano ReadMe.md Apri il file ReadMe.md con nano e scrivi: # ReadMe In questo file si scrive qualcosa dal Dev Salva e chiudi nano.\ngit add . git commit -m \u0026#34;Modificato il file da Dev\u0026#34; git push origin dev Prepara le modifiche, crea una commit e invia al repository remoto. git checkout my_branch Cambia il branch attivo a my_branch. nano ReadMe.md Apri il file ReadMe.md con nano e scrivi: # ReadMe In questo file si RI - scrive qualcosa dal MyBranch Salva e chiudi nano.\ngit add . git commit -m \u0026#34;Modificato il file da MyBranch\u0026#34; git push origin my_branch Prepara le modifiche, crea una commit e invia al repository remoto. Effettua la merge dei branch:\ngit checkout master git pull origin master git merge dev git push origin master git branch -d dev Cambia il branch attivo a master, aggiorna master con le modifiche dal repository remoto, unisci dev a master, invia le modifiche e elimina il branch dev. git checkout master git pull origin master git merge my_branch Cambia il branch attivo a master, aggiorna master con le modifiche dal repository remoto e unisci my_branch a master. Se ci\nsono conflitti, Git lo segnalerà. Apri il file con nano e risolvi il conflitto:\n# ReadMe \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD In questo file si scrive qualcosa dal Dev ======= In questo file si Ri - scrive qualcosa dal MyBranch \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; my_branch Modifica il file come desiderato, salva e chiudi nano.\nPrepara le modifiche, effettua la commit e pubblica:\ngit add . git commit -m \u0026#34;Merge con Conflitto\u0026#34; git push origin master git branch -d my_branch Prepara le modifiche, crea una commit con il messaggio \u0026ldquo;Merge con Conflitto\u0026rdquo;, invia le modifiche al repository remoto e elimina il branch my_branch. Eliminare Branch Remoti\r#\rQuando hai finito di usare un branch, è buona norma eliminarlo per evitare confusione:\ngit branch -a Elenca tutti i branch esistenti sia nel repository locale che remoto. git push origin --delete dev git push origin --delete dev: Questo comando elimina il branch dev dal repository remoto. git push origin --delete my_branch Elimina il branch my_branch dal repository remoto. In questo modo rimarrà solo il branch master.\n"},{"id":3,"href":"/docs/tutorial/markdown/","title":"Markdown","section":"Passo 2: Tutorial Vari","content":"\rGuida Completa al Markdown\r#\rMarkdown è un linguaggio di markup leggero che permette di formattare testo semplice in modo semplice ed intuitivo.\nViene ampiamente utilizzato su piattaforme come GitHub, Reddit e nei file README.\nTesto\r#\rGrassetto\r#\rPer rendere il testo in grassetto, racchiudilo tra due coppie di asterischi (**) o trattini bassi (__).\n**Questo testo è in grassetto** __Anche questo testo è in grassetto__ Questo testo è in grassetto\nAnche questo testo è in grassetto\nCorsivo\r#\rPer il testo in corsivo, usa una singola coppia di asterischi (*) o trattini bassi (_).\n*Questo testo è in corsivo* _Anche questo testo è in corsivo_ Questo testo è in corsivo\nAnche questo testo è in corsivo\nBarrato\r#\rPer il testo barrato, racchiudilo tra due coppie di tilde (~~).\n~~Questo testo è barrato~~ Questo testo è barrato\nTitoli\r#\rPer creare titoli, utilizza il carattere cancelletto (#). La quantità di cancelletti determina il livello del titolo.\n# Titolo 1 ## Titolo 2 ### Titolo 3 #### Titolo 4 ##### Titolo 5 ###### Titolo 6 Titolo 1\r#\rTitolo 2\r#\rTitolo 3\r#\rTitolo 4\r#\rTitolo 5\r#\rTitolo 6\r#\rListe\r#\rListe Non Ordinate\r#\rUsa asterischi (*), segni più (+) o trattini (-) per creare liste non ordinate.\n* Elemento 1 * Elemento 2 * Sottoelemento 2.1 * Sottoelemento 2.2 + Elemento 3 - Elemento 4 Elemento 1 Elemento 2 Sottoelemento 2.1 Sottoelemento 2.2 Elemento 3 Elemento 4 Liste Ordinate\r#\rPer le liste ordinate, utilizza i numeri seguiti da un punto (1.).\n1. Primo elemento 2. Secondo elemento 1. Sottoelemento 2.1 2. Sottoelemento 2.2 3. Terzo elemento Primo elemento Secondo elemento Sottoelemento 2.1 Sottoelemento 2.2 Terzo elemento Liste Annidate\r#\rPuoi creare liste annidate indentando gli elementi con quattro spazi o un tab.\n1. Primo elemento 2. Secondo elemento * Sottoelemento 2.1 * Sottoelemento 2.2 Primo elemento Secondo elemento Sottoelemento 2.1 Sottoelemento 2.2 Link\r#\rPer creare un link, usa la seguente sintassi:\n[Nome del link](URL) [Google](https://www.google.com) Google\nImmagini\r#\rPer aggiungere un\u0026rsquo;immagine, usa un punto esclamativo (!) seguito dal testo alternativo racchiuso tra parentesi quadre e l\u0026rsquo;URL dell\u0026rsquo;immagine tra parentesi tonde.\n![Testo Alternativo](URL) ![Esempio di Immagine](https://www.example.com/immagine.png) Codice\r#\rInline\r#\rPer inserire codice inline, racchiudilo tra backtick (`).\nUtilizza il comando `npm install` per installare i pacchetti. Utilizza il comando npm install per installare i pacchetti.\nBlocco di Codice\r#\rPer blocchi di codice, usa tre backtick (```) prima e dopo il codice. Puoi anche specificare il linguaggio per evidenziazione della sintassi.\n\\``` function esempio() { console.log(\u0026#34;Ciao, mondo!\u0026#34;); } \\``` function esempio() { console.log(\u0026#34;Ciao, mondo!\u0026#34;); } Citazioni\r#\rPer creare una citazione, usa il simbolo di maggiore (\u0026gt;).\n\u0026gt; Questo è un testo citato. Questo è un testo citato.\nTabelle\r#\rPer creare tabelle, utilizza trattini (-) per la riga di intestazione e pipe (|) per separare le colonne.\n| Intestazione 1 | Intestazione 2 | | -------------- | -------------- | | Riga 1 Colonna 1 | Riga 1 Colonna 2 | | Riga 2 Colonna 1 | Riga 2 Colonna 2 | Intestazione 1 Intestazione 2 Riga 1 Colonna 1 Riga 1 Colonna 2 Riga 2 Colonna 1 Riga 2 Colonna 2 Linea Orizzontale\r#\rPer creare una linea orizzontale, usa tre o più asterischi (***), trattini (---) o underscore (___).\n*** --- ___ Checklist\r#\rPer creare una checklist, usa trattini seguiti da parentesi quadre. Puoi inserire una x per indicare un elemento completato.\n- [ ] Da fare - [x] Fatto Da fare Fatto "},{"id":4,"href":"/posts/my-first-post/","title":"My First Post","section":"Posts","content":"\rIntroduzione\r#\rQuesto è del testo in grassetto, e questo è del testo in corsivo.\nVisita il sito web Hugo !!!\n"}]